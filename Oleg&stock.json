{
  "name": "Oleg&stock",
  "nodes": [
    {
      "parameters": {
        "url": "https://rsshub.app/telegram/channel/bbbreaking",
        "options": {
          "customFields": "={{ $json['Readable date'] }}",
          "ignoreSSL": true
        }
      },
      "id": "d9dd5e52-f080-43f2-aa2d-b83223907693",
      "name": "RSS Feed Read",
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1,
      "position": [
        -1040,
        -192
      ]
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 2
            },
            {
              "field": "=days"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -1200,
        -192
      ],
      "id": "23d14fad-a004-4c89-a03f-e84a86ca0f12",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "functionCode": "const chatIds = [\"1251086517\", \"502200130\"];\n\nreturn items.flatMap((item, index) => {\n  return chatIds.map(id => ({\n    json: {\n      chatId: id,\n      parsedJSON: item.json.parsedJSON // —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç LLM\n    },\n    pairedItem: {\n      item: index, // —Å–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ —Å –∏—Å—Ö–æ–¥–Ω—ã–º item\n    }\n  }));\n});"
      },
      "id": "d5be8fbb-3b20-4937-bb64-2c84aa9372e1",
      "name": "Prepare Chat IDs",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        656,
        -368
      ]
    },
    {
      "parameters": {
        "chatId": "={{$json.chatId}}\n",
        "text": "=–í—Ä–µ–º—è –Ω–æ–≤–æ—Å—Ç–∏: {{ $('RSS Feed Read').item.json.pubDate }}\n–¢–µ–º–∞: {{ $('RSS Feed Read').item.json.contentSnippet }}\n–ü–µ—Ä—Å–æ–Ω—ã: {{$json.parsedJSON.data.entities.PER.join(' ')}}\n–õ–æ–∫–∞—Ü–∏—è: {{$json.parsedJSON.data.entities['LOC/GPE'].join(' ')}}\n–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {{$json.parsedJSON.data.tonality}}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {{$json.parsedJSON.data.category}}\n–ü—Ä–æ–≥–Ω–æ–∑: {{$json.parsedJSON.data.prognosis}}",
        "additionalFields": {}
      },
      "id": "c8cd4586-1c20-4e28-bb73-e864344ffb98",
      "name": "Send Telegram Message",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        864,
        -368
      ],
      "webhookId": "f0e0fa69-37c3-4e85-ba18-2ef8b9c5ab9b",
      "credentials": {
        "telegramApi": {
          "id": "J1cbqyNnsdu1Ucf9",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.title }}",
        "options": {
          "systemMessage": "=–¢—ã ‚Äî —Ñ–∏–ª—å—Ç—Ä –Ω–æ–≤–æ—Å—Ç–µ–π. \n–ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–æ–≤–∞—è ‚Üí –æ—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ \"0\".  \n–ï—Å–ª–∏ –¥—É–±–ª—å ‚Üí —Å—Ç—Ä–æ–≥–æ \"1\".  \n–ù–∏–∫–∞–∫–∏—Ö –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤, —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –ø—Ä–æ–±–µ–ª–æ–≤."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -880,
        -192
      ],
      "id": "605e7bb5-2470-46ed-822e-8d26abc101d1",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": "gemma:latest",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOllama",
      "typeVersion": 1,
      "position": [
        -880,
        -16
      ],
      "id": "e82a3409-e42e-465b-9cf2-2492bee4de2e",
      "name": "Ollama Chat Model",
      "credentials": {
        "ollamaApi": {
          "id": "iPYXJm2iKBaiYEZP",
          "name": "Ollama account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "7f92f188-5463-44b3-a6d2-820e6635cbab",
              "leftValue": "={{ $json.output }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -384,
        -192
      ],
      "id": "a2f55813-9d4c-441a-aa8b-54b46bcc68f1",
      "name": "If"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  return {\n    json: {\n      output: Number(item.json.output.trim())\n    }\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -576,
        -192
      ],
      "id": "b9c540bc-7d5e-4ef9-bda6-1fdf3e61ffcd",
      "name": "Code"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "=default",
        "contextWindowLength": 40
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -784,
        112
      ],
      "id": "8c0f2bd2-2e18-4e7c-8d76-f9ecc7cffb3b",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('RSS Feed Read').item.json.content }}",
        "messages": {
          "messageValues": [
            {
              "message": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä—ã–Ω–∫–∞–º. - –û–ø—Ä–µ–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏:\n       - –ö–æ–º–ø–∞–Ω–∏–∏ (ORG): Tesla, Apple, Nvidia, Microsoft\n       - –ü–µ—Ä—Å–æ–Ω—ã (PER): –î–∂–µ—Ä–æ–º –ü–∞—É—ç–ª–ª, –î–∂–æ –ë–∞–π–¥–µ–Ω, –°–∏ –¶–∑–∏–Ω—å–ø–∏–Ω\n       - –°—Ç—Ä–∞–Ω—ã (LOC/GPE): –°–®–ê, –†–æ—Å—Å–∏—è, –ö–∏—Ç–∞–π\n       - –û–ø—Ä–µ–¥–µ–ª–∏ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: –ø–æ–∑–∏—Ç–∏–≤–Ω–∞—è, –Ω–µ–≥–∞—Ç–∏–≤–Ω–∞—è –∏–ª–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è\n       - –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–π –Ω–æ–≤–æ—Å—Ç—å:\n       \t- üè¢ –ö–æ–º–ø–∞–Ω–∏—è ‚Üí –Ω–æ–≤–æ—Å—Ç–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏—è—Ö\n       \t- üåç –ü–æ–ª–∏—Ç–∏–∫–∞/—ç–∫–æ–Ω–æ–º–∏–∫–∞ ‚Üí –Ω–æ–≤–æ—Å—Ç–∏, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ —Ä—ã–Ω–æ–∫\n       \t- üí∞ –§–∏–Ω–∞–Ω—Å—ã ‚Üí –æ—Ç—á—ë—Ç—ã, —Ä–µ—à–µ–Ω–∏—è —Ü–µ–Ω—Ç—Ä–æ–±–∞–Ω–∫–æ–≤\n\t- –ï—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –∫–æ–º–ø–∞–Ω–∏—è, —Å–æ–ø–æ—Å—Ç–∞–≤—å —Å —Ç–∏–∫–µ—Ä–æ–º:\n       \t\tTesla ‚Üí TSLA, Apple ‚Üí AAPL, Nvidia ‚Üí NVDA, Microsoft ‚Üí MSFT\n   \t- –ù–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑:\n       \t\t- –ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è ‚Üí —Ä–æ—Å—Ç (+1‚Äì3%)\n       \t\t- –ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è ‚Üí –ø–∞–¥–µ–Ω–∏–µ (-1‚Äì3%)\n       \t\t- –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è ‚Üí –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π\n\n \t- –í–æ–∑–≤—Ä–∞—â–∞–π —Å—Ç—Ä–æ–≥–æ JSON-–æ–±—ä–µ–∫—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\t{\n  \t  \"status\": \"processed\",\n              \"data\": {\n                    \"entities\": {\n                     \"PER\": [...],\n                     \"ORG\": [...],\n                     \"LOC/GPE\": [...]\n                      },\n            \"tonality\": \"<—Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å>\",\n            \"category\": \"<–∫–∞—Ç–µ–≥–æ—Ä–∏—è>\",\n            \"prognosis\": \"<–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑>\"\n            }\n          }\n"
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        -160,
        -288
      ],
      "id": "82e7997f-cbf3-4e7c-99a0-73ed31e4c17b",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "model": "vikhr-llama3.1-8b-instruct-r-21-09-24.Q4_K_M:latest",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOllama",
      "typeVersion": 1,
      "position": [
        -160,
        -16
      ],
      "id": "d69bd2ad-21b7-43e1-b8fd-decbf8e87a8e",
      "name": "Ollama Chat Model1",
      "credentials": {
        "ollamaApi": {
          "id": "iPYXJm2iKBaiYEZP",
          "name": "Ollama account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  let raw = item.json.text || item.json.output;\n  if (!raw) {\n    item.json.parsedJSON = null;\n    return item;\n  }\n\n  // –ò—â–µ–º –±–ª–æ–∫ –º–µ–∂–¥—É ```json ... ```\n  const match = raw.match(/```json\\s*([\\s\\S]*?)\\s*```/);\n  let jsonPart = match ? match[1].trim() : null;\n\n  if (!jsonPart) {\n    item.json.parsedJSON = null;\n    return item;\n  }\n\n  // –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤–º–µ—Å—Ç–æ $json.isoDate\n  jsonPart = jsonPart.replace(/\\$json\\.isoDate/g, new Date().toISOString());\n\n  try {\n    let parsed = JSON.parse(jsonPart);\n    item.json.parsedJSON = parsed; // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å –æ–±—ä–µ–∫—Ç JSON\n  } catch (e) {\n    item.json.parsedJSON = null;\n  }\n\n  return item;\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        144,
        -288
      ],
      "id": "8b36e4ae-aa2a-493e-b9da-17c1c6124d18",
      "name": "Parsing 2 json"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  const data = item.json.parsedJSON?.data;\n\n  if (!data) {\n    item.json.telegramText = \"–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–µ—Ç.\";\n    return item;\n  }\n\n  const time = data.time || \"-\";\n  const headline = data.headline || \"-\";\n  const persons = (data.entities?.PER || []).join(\" \") || \"-\";\n  const locations = (data.entities?.LOC || data.entities?.GPE || data.entities?.[\"LOC/GPE\"] || []).join(\" \") || \"-\";\n  const tonality = data.tonality || \"-\";\n  const category = data.category || \"-\";\n  const prognosis = data.prognosis || \"-\";\n\n  item.json.telegramText =\n    `–í—Ä–µ–º—è –Ω–æ–≤–æ—Å—Ç–∏: ${time}\\n` +\n    `–¢–µ–º–∞: ${headline}\\n` +\n    `–ü–µ—Ä—Å–æ–Ω—ã: ${persons}\\n` +\n    `–õ–æ–∫–∞—Ü–∏—è: ${locations}\\n` +\n    `–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: ${tonality}\\n` +\n    `–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category}\\n` +\n    `–ü—Ä–æ–≥–Ω–æ–∑: ${prognosis}`;\n\n  return item;\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        480,
        -368
      ],
      "id": "4d21cdbd-ab6b-4f7b-bdc9-ed55e98a4103",
      "name": "Format"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "79006876-f2d2-4992-8fca-4dcf6e3713b8",
              "leftValue": "={{ $json.parsedJSON.data.tonality }}",
              "rightValue": "\"–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è\"",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        304,
        -288
      ],
      "id": "bae46569-666b-4e06-a9ec-8a100cbb53f8",
      "name": "If1"
    }
  ],
  "pinData": {},
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "RSS Feed Read",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Chat IDs": {
      "main": [
        [
          {
            "node": "Send Telegram Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RSS Feed Read": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Telegram Message": {
      "main": [
        []
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ollama Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Parsing 2 json",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ollama Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Parsing 2 json": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format": {
      "main": [
        [
          {
            "node": "Prepare Chat IDs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Format",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "ba5da39c-dc18-4f35-87f3-cc69c8e9a5af",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "d18a8fb346dce820211fca131d5a9de677232fffc752455368751192cd0e947f"
  },
  "id": "F96Nzt05dp5Vu67J",
  "tags": []
}